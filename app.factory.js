(function () {
	"use strict"
	
	angular
		.module('app')
		.factory('appFactory', appFactory);

	appFactory.$inject = [];
	function appFactory() {
		var factory = {
			getStories: getStories
		};
		return factory;



		var kita = `
		<header>
		<h1 class="p-name">Git gud</h1>
		</header>
		<section data-field="subtitle" class="p-summary">
		Step up your software development game with version control software
		</section>
		<section data-field="body" class="e-content">
		<section name="c66a" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h3 name="8138" id="8138" class="graf graf--h3 graf--leading graf--title">Git gud</h3><h4 name="d656" id="d656" class="graf graf--h4 graf-after--h3 graf--subtitle">Step up your software development game with version control software</h4><p name="55ee" id="55ee" class="graf graf--p graf-after--h4">Have you ever wondered how one learns to use Git well? You use Git very poorly for a long time. Eventually, you’ll get the hang of it. Here’s my short tutorial about what Git actually is and the 7 most used Git commands. Mainly, aimed towards aspiring developers and college freshmen who are in need of an introductory explanation of what Git is and how to use it with confidence.</p></div><div class="section-inner sectionLayout--fullWidth"><figure name="e36a" id="e36a" class="graf graf--figure graf--layoutFillWidth graf-after--p"><div class="aspectRatioPlaceholder is-locked"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 40%;"></div><img class="graf-image" data-image-id="1*7hLJs-qOh-1pUMH4Z78A6A.jpeg" data-width="3000" data-height="1200" src="https://cdn-images-1.medium.com/max/2000/1*7hLJs-qOh-1pUMH4Z78A6A.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #1</figcaption></figure></div><div class="section-inner sectionLayout--insetColumn"><p name="3d4a" id="3d4a" class="graf graf--p graf-after--figure">The universal first step for any developer is to choose a common place to host his or her code base. Voilá, <a href="https://github.com/" data-href="https://github.com/" class="markup--anchor markup--p-anchor" target="_blank">Github</a>! The meeting place for all things regarding code. To be able to understand the concept of Github you would first need to understand what Git really is.</p><p name="741b" id="741b" class="graf graf--p graf-after--p">Git is a version control software, based on the command line, with a few desktop apps available for Windows and Mac. Created by Linus Torvalds, the father of Linux and one of the most influential people in computer science, ever. Channeling this merit, Git has become a standard for a vast majority of software developers regarding sharing and maintaining code. Those were a bunch of large words. Let’s break it down. Version control software, means exactly what it says. Git allows you to have a preview of all the versions of your code you have ever written. Literally, ever! Every code base a developer has, will be stored in its respective repository, which can be named anything from <em class="markup--em markup--p-em">pineapple</em> to <em class="markup--em markup--p-em">express</em>. In the process of developing the code within this repository you will make countless changes, up until the first official release. Here lies the core reason why version control software is so important. It enables you, the developer, to have a clear view of all changes, revisions and improvements ever done to the code base. In turn making it much easier to collaborate, download code to make edits, and upload changes to the repository. However, in spite of all this awesomeness, one thing takes the crown as the most incredible. You can download and use the files even thought you have nothing to do with the development process!</p><p name="e557" id="e557" class="graf graf--p graf-after--p">Let’s get back to the Github part of the story. It’s just a hub for all repositories, where they can be stored and viewed online. A central meeting point for like minded individuals.</p><h3 name="604c" id="604c" class="graf graf--h3 graf-after--p">Let’s start using it already!</h3><p name="6c1c" id="6c1c" class="graf graf--p graf-after--h3">Okay, remember, Git is a software, and like any other software you’ll first need to install it:</p><div name="a79b" id="a79b" class="graf graf--mixtapeEmbed graf-after--p"><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" data-href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" class="markup--anchor markup--mixtapeEmbed-anchor" title="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"><strong class="markup--strong markup--mixtapeEmbed-strong">Git - Installing Git</strong><br><em class="markup--em markup--mixtapeEmbed-em">If you do want to install Git from source, you need to have the following libraries that Git depends on: autotools…</em>git-scm.com</a><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" class="js-mixtapeImage mixtapeImage u-ignoreBlock" data-media-id="fb28620fe3100d2d6fe1d3e4a962103f" data-thumbnail-img-id="0*ytARHURsHktDneYa." style="background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*ytARHURsHktDneYa.);"></a></div><p name="e6fa" id="e6fa" class="graf graf--p graf-after--mixtapeEmbed">*<strong class="markup--strong markup--p-strong">Anchorman voice</strong>*<br><em class="markup--em markup--p-em">Please click on the link above, and follow the instructions stated…</em></p><p name="9258" id="9258" class="graf graf--p graf-after--p">Done installing it, great. Now you will need to punch in <a href="https://github.com/" data-href="https://github.com/" class="markup--anchor markup--p-anchor" target="_blank">github.com</a> in your browsers address bar. Create an account if you don’t already have one, and you’re set to rock’n’roll! Jump in and create a new repository, name it Steve for no reason at all, just for the fun of having a repository named Steve. Go ahead and check the <em class="markup--em markup--p-em">Initialize this repository with a README </em>checkbox and click the create button. You now have a new repository called Steve. Be proud of yourself, I sure am.</p><figure name="cb2b" id="cb2b" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 961px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 137.3%;"></div><img class="graf-image" data-image-id="1*txfAZdt3U0u9V9WTEZiyNQ.jpeg" data-width="746" data-height="1024" src="https://cdn-images-1.medium.com/max/800/1*txfAZdt3U0u9V9WTEZiyNQ.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #2</figcaption></figure><h3 name="c756" id="c756" class="graf graf--h3 graf-after--figure">Starting to use Git for real this time.</h3><p name="03c3" id="03c3" class="graf graf--p graf-after--h3">Now comes the fun part. You’re ready to clone Steve to your local machine. View this process as simply copying the repository from Github to your computer. By clicking the <em class="markup--em markup--p-em">clone or download</em> button you will see a URL which will look something like this:</p><pre name="9cd7" id="9cd7" class="graf graf--pre graf-after--p">https://github.com/yourGithubAccountName/Steve.git</pre><p name="5333" id="5333" class="graf graf--p graf-after--pre">Copy this URL and open up a command prompt. Now write and run this command:</p><pre name="995f" id="995f" class="graf graf--pre graf-after--p">git clone https://github.com/yourGithubAccountName/Steve.git</pre><p name="5264" id="5264" class="graf graf--p graf-after--pre">Abrakadabra! Steve has automagically been cloned to your computer. Looking in the directory where you cloned the repository, you’ll see a folder named Steve. This local folder is now linked with it’s <em class="markup--em markup--p-em">origin, </em>the original repository on Github.</p><p name="d9a1" id="d9a1" class="graf graf--p graf-after--p">Remember this process, you will surely repeat it many times in your career as a software developer. With all this formal stuff done, you are ready to get started with the most common and regularly used Git commands.</p><h3 name="80d4" id="80d4" class="graf graf--h3 graf-after--p">You’re actually just now starting to use git for real.</h3><p name="ca9c" id="ca9c" class="graf graf--p graf-after--h3">Open up the Steve directory and go ahead and open a command prompt from within the same directory. Run the command:</p><pre name="9e10" id="9e10" class="graf graf--pre graf-after--p">git status</pre><p name="6b26" id="6b26" class="graf graf--p graf-after--pre">This will output the status of your working directory, showing you all the files you have edited. This means it’s showing you the difference between the files on the origin and your local working directory. The status command is designed to be used as a <em class="markup--em markup--p-em">commit</em> template. I’ll come back to talking about commit a bit further down this tutorial. Simply put, <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-status" data-href="https://git-scm.com/docs/git-status" class="markup--anchor markup--p-anchor" target="_blank">git status</a></code> shows you which files you have edited, in turn giving you an overview of which of them you wish to upload back to the origin.</p><p name="8acb" id="8acb" class="graf graf--p graf-after--p">But, before you do any of that, first you need to pick which files you wish to send back to the origin. This is done with:</p><pre name="4b84" id="4b84" class="graf graf--pre graf-after--p"><a href="https://git-scm.com/docs/git-add" data-href="https://git-scm.com/docs/git-add" class="markup--anchor markup--pre-anchor" target="_blank">git add</a></pre><p name="4c80" id="4c80" class="graf graf--p graf-after--pre">Please go ahead and create a new text file in the Steve directory. Name it <em class="markup--em markup--p-em">pineapple.txt</em> just for the fun of it. Write whatever you would want in this file. Switch back to the command prompt, and run <code class="markup--code markup--p-code">git status</code> once again. Now, you’ll see the file show up in red under the banner <em class="markup--em markup--p-em">untracked files.</em></p><pre name="01c4" id="01c4" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be commited)</pre><pre name="d7b1" id="d7b1" class="graf graf--pre graf-after--pre">       pineapple.txt<br><br></pre><p name="5130" id="5130" class="graf graf--p graf-after--pre">The next step is to add a file to staging. Staging can be viewed as a context where all changes you have picked will be bundled into one, when the time comes to commit them. Now you can go ahead and add this file to staging:</p><pre name="963f" id="963f" class="graf graf--pre graf-after--p">git add -A</pre><p name="8095" id="8095" class="graf graf--p graf-after--pre">The <em class="markup--em markup--p-em">-A </em>flag means that all files that have been changed will be staged for commit. However, <code class="markup--code markup--p-code">git add</code> is very flexible and it is perfectly fine to add files one by one. Just like this:</p><pre name="1a79" id="1a79" class="graf graf--pre graf-after--p">git add pineapple.txt</pre><p name="514a" id="514a" class="graf graf--p graf-after--pre">This approach gives you power to cherry pick every file you wish to stage, without the added worry that you’ll change something you weren’t supposed to.</p><p name="71c9" id="71c9" class="graf graf--p graf-after--p">After running <code class="markup--code markup--p-code">git status</code> once again you should see something like this:</p><pre name="0906" id="0906" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</pre><pre name="61f1" id="61f1" class="graf graf--pre graf-after--pre">new file:   pineapple.txt<br><br></pre><p name="a387" id="a387" class="graf graf--p graf-after--pre">Ready to commit the changes? I sure am.</p><pre name="4b32" id="4b32" class="graf graf--pre graf-after--p">git commit -m &quot;Write your message here&quot;</pre><p name="9131" id="9131" class="graf graf--p graf-after--pre">The <a href="https://git-scm.com/docs/git-commit" data-href="https://git-scm.com/docs/git-commit" class="markup--anchor markup--p-anchor" target="_blank">Git commit</a> command stores the current files in staging in a new commit along with a log message from the user describing the changes. The <em class="markup--em markup--p-em">-m </em>flag includes the message written in double quotes in the commit.</p><p name="f0e1" id="f0e1" class="graf graf--p graf-after--p">Checking the status once again will show you:</p><pre name="1477" id="1477" class="graf graf--pre graf-after--p">On branch master<br>Your branch is ahead of &#39;origin/master&#39; by 1 commit.<br>  (use &quot;git push&quot; to publish your local commits)<br>nothing to commit, working directory clean</pre><p name="eb60" id="eb60" class="graf graf--p graf-after--pre">All changes have now been bundled into one commit with one dedicated message regarding the work you have done. You’re now ready to <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-push" data-href="https://git-scm.com/docs/git-push" class="markup--anchor markup--p-anchor" target="_blank">git push</a></code> this commit to the <em class="markup--em markup--p-em">origin</em>. The push command does literally what it means. It will upload your committed changes from your local machine to the repository origin on Github. Go back to the command prompt and run:</p><pre name="85b4" id="85b4" class="graf graf--pre graf-after--p">git push</pre><p name="0d69" id="0d69" class="graf graf--p graf-after--pre">It will ask you to enter your Github username and password, after which you will see something like this:</p><pre name="ad8e" id="ad8e" class="graf graf--pre graf-after--p">Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 280 bytes | 0 bytes/s, done.<br>Total 3 (delta 0), reused 0 (delta 0)<br>To https://github.com/yourGithubUserName/Steve.git<br>   c77a97c..08bb95a  master -&gt; master</pre><p name="6b0f" id="6b0f" class="graf graf--p graf-after--pre">That’s it. You have uploaded the local changes. Go ahead and look at your repository on Github and you’ll see that it now contains a file named <em class="markup--em markup--p-em">pineapple.txt</em>.</p><p name="c659" id="c659" class="graf graf--p graf-after--p">What if you work in a team of developers? Where all of them push commits to the origin. What happens then? This is where Git starts to show it’s real power. You can just as easily <a href="https://git-scm.com/docs/git-pull" data-href="https://git-scm.com/docs/git-pull" class="markup--anchor markup--p-anchor" target="_blank">pull</a> the latest version of the code base to your local machine with one simple command.</p><pre name="0a6d" id="0a6d" class="graf graf--pre graf-after--p">git pull</pre><p name="74b0" id="74b0" class="graf graf--p graf-after--pre">But Git has it’s limitations. You need to have matching versions to be able to <strong class="markup--strong markup--p-strong">push</strong> changes to the origin. Meaning the version you have locally needs to be exactly the same as the one on the origin. When <strong class="markup--strong markup--p-strong">pulling</strong> from the origin you shouldn’t have files in the working directory, as they will be overwritten in the process. Hence me giving this simple advice. When in the process of learning Git, make a habit of following these steps:</p><ol class="postList"><li name="ee45" id="ee45" class="graf graf--li graf-after--p"><code class="markup--code markup--li-code">git status</code> all the time!</li><li name="b2b9" id="b2b9" class="graf graf--li graf-after--li">Try only to change files you really want to change.</li><li name="0423" id="0423" class="graf graf--li graf-after--li"><code class="markup--code markup--li-code">git add -A</code> is your friend.</li><li name="2083" id="2083" class="graf graf--li graf-after--li">Feel free to <code class="markup--code markup--li-code">git commit -m &quot;meaningful messages&quot;</code> .</li><li name="238d" id="238d" class="graf graf--li graf-after--li">Always <code class="markup--code markup--li-code">git pull</code> <strong class="markup--strong markup--li-strong">before</strong> doing any pushing, <br>but <strong class="markup--strong markup--li-strong">after</strong> you have committed any changes.</li><li name="853d" id="853d" class="graf graf--li graf-after--li graf--last">Finally, <code class="markup--code markup--li-code">git push</code> the committed changes.</li></ol></div></div></section><section name="c243" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="a96b" id="a96b" class="graf graf--p graf--leading">Phew, are you still with me? You’ve come a long way. Have a break.</p><figure name="4679" id="4679" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 700px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 100%;"></div><img class="graf-image" data-image-id="1*vrNe9wt2zHczmXx-tkGipw.jpeg" data-width="1043" data-height="1043" src="https://cdn-images-1.medium.com/max/800/1*vrNe9wt2zHczmXx-tkGipw.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #3</figcaption></figure><p name="52f3" id="52f3" class="graf graf--p graf-after--figure">Rested up? Great! You’re ready for some error handling. What if you accidentally changed some files your shouldn’t have touched. No need to freak out, just use <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-checkout" data-href="https://git-scm.com/docs/git-checkout" class="markup--anchor markup--p-anchor" target="_blank">git checkout</a></code>. Let’s change something in the <em class="markup--em markup--p-em">pineapple.txt</em> file. Add another line of text in there, let’s say, <em class="markup--em markup--p-em">“Steve is mega-awesome!”</em>. Go ahead, save the changes and check the <code class="markup--code markup--p-code">git status</code>.</p><pre name="75b2" id="75b2" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</pre><pre name="5d1e" id="5d1e" class="graf graf--pre graf-after--pre">modified:   pineapple.txt</pre><pre name="108d" id="108d" class="graf graf--pre graf-after--pre">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</pre><p name="871d" id="871d" class="graf graf--p graf-after--pre">As expected it has been registered as a change. The simplest way to revert the changes is to run:</p><pre name="445a" id="445a" class="graf graf--pre graf-after--p">git checkout -- pineapple.txt</pre><p name="df5e" id="df5e" class="graf graf--p graf-after--pre">Now you will see the file has been returned to it’s previous state.</p><p name="19bf" id="19bf" class="graf graf--p graf-after--p">But what if you really mess up. I mean like majorly mess things up, and need to reset everything back to the state the <em class="markup--em markup--p-em">origin</em> is in. No need to worry, during emergencies like this we have this beauty:</p><pre name="1ace" id="1ace" class="graf graf--pre graf-after--p">git reset --hard</pre><p name="16ac" id="16ac" class="graf graf--p graf-after--pre graf--last">The <a href="https://git-scm.com/docs/git-reset" data-href="https://git-scm.com/docs/git-reset" class="markup--anchor markup--p-anchor" target="_blank">Git reset</a> command with the -<em class="markup--em markup--p-em">-hard</em> flag discards all changes since the last commit. Pretty handy sometimes.</p></div></div></section><section name="aa1c" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="783a" id="783a" class="graf graf--p graf--leading">To wrap up this tutorial I’d like to encourage you to play around with Git as much as possible. It’s by far the best way to learn how to use it with confidence. Apart from that, make a habit of reading the Git documentation. As confusing it may seem at first, after a few moments of reading you will get the hang of it.</p><p name="480f" id="480f" class="graf graf--p graf-after--p">More tutorials like this one will be coming soon. Hope you had as much fun reading this article as I had writing it.</p><p name="5c1c" id="5c1c" class="graf graf--p graf-after--p">Git gud or git rekt! :)</p><p name="e082" id="e082" class="graf graf--p graf-after--p graf--last"><em class="markup--em markup--p-em">If you liked this, click the 💚 below so other people will see this here on Medium.</em></p></div></div></section>
		</section>
		`;
		///////////////

		function getStories() {
			var stories = [
				{
					id: 1,
					title: "Can you learn to code in 4 weeks?",
					subtitle: "Well, no. Isn’t it obvious?",
					createdAt: "Dec 3 2016, 3 min read.",
					body: `
					<section name="6b4a" class="section section--body section--first"><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="4a16" id="4a16" class="graf graf--p graf-after--h3">Well, no. Isn’t it obvious? However, don’t get your spirits down, you can indeed take a huge leap in the right direction on your path of becoming a programmer.</p><figure name="b9de" id="b9de" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 350px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 50%;"></div><img class="graf-image" data-image-id="1*SrGs_33EA0jm9L245NQXug.jpeg" data-width="1920" data-height="960" src="https://cdn-images-1.medium.com/max/800/1*SrGs_33EA0jm9L245NQXug.jpeg"></div></figure><p name="c2eb" id="c2eb" class="graf graf--p graf-after--figure">The whole concept of becoming a <em class="markup--em markup--p-em">developer</em> is a journey. Not a single one of us who are currently working as software engineers have had a moment of clarity where we said to ourselves…</p><blockquote name="3272" id="3272" class="graf graf--blockquote graf--startsWithDoubleQuote graf-after--p graf--last">“Yep, I’m a developer now.”</blockquote></div></div></section><section name="f606" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="b24e" id="b24e" class="graf graf--p graf--leading">You might be asking yourself, well what about all the courses out there. They all say the same. Learn to code in 4 weeks or less. It’s, bluntly put, impossible. Not because I undermine the intellectual capabilities of the average person. Simply, because we humans have a limited capacity to process huge amounts of data. This is precisely what programming is. Every day is a challenge to solve problems, mysteries and illusions. They are riddles to the average person. So how does one do this? By processing data. You have to dissect the problem using the vast data you have accumulated since the very beginning. The day you you started learning how to code.</p><p name="4ce3" id="4ce3" class="graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p"><span class="graf-dropCap">Do</span> you understand now? Coding is experience. Knowledge of what has been, and things you have seen. All working in unison, towards a common goal. To solve that problem you are in such a need to solve. Just as a blacksmith needs to condition himself every day, by hammering away on a piece of armor, until reaching perfection. Programmers do the same, with their brains. Hammering away, on <em class="markup--em markup--p-em">this</em> algorithm, and <em class="markup--em markup--p-em">that</em> function to find an ingenious way of solving a <em class="markup--em markup--p-em">mystery.</em></p><figure name="1fa3" id="1fa3" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 394px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 56.3%;"></div><img class="graf-image" data-image-id="1*Yk6A5CY6bzvvAyDT9f5YzQ.jpeg" data-width="1920" data-height="1080" src="https://cdn-images-1.medium.com/max/800/1*Yk6A5CY6bzvvAyDT9f5YzQ.jpeg"></div></figure><p name="385d" id="385d" class="graf graf--p graf-after--figure">Don’t take this the wrong way. I’m only trying to encourage you. Don’t give up in your quest of becoming a developer. Because it is hard, very hard. I still remember the long sleepless nights I spent banging my head against various programming assignments. You will too. But it will only make you stronger<em class="markup--em markup--p-em">.</em></p><p name="379a" id="379a" class="graf graf--p graf-after--p">Above I mentioned the limited capacity we humans have with large amounts of data. Let me elaborate this in a simpler way. Our short term memory is horrible. Only an incredibly small fraction of it actually sticks in our heads and gets stored in our long term memory. This is why we need conditioning. Regular exercise, on a daily basis, pushes our brains to the maximum. This in turn, forces it to create the neural connections needed to make us remember more of what is actually needed. Not just funny memes of cats. Jokes aside. We humans are biologically poorly programmed. Conditioning fights this innate flaw.</p><p name="cc59" id="cc59" class="graf graf--p graf-after--p">Returning to the illusion of being able to learn to code in 4 weeks, there is one thing I can confirm. You can more than surely learn how to, in time, become a programmer. How to gain the instinct and learn what you need to do in order to reach your goals. In absolute certainty will you learn the core programming skills. They will keep you afloat on your journey to the promised city developers strive to reach. These logical, problem solving skills and a bit of magic voodoo witchcraft (again with the lame jokes), are what you will in time condition to perfection. You are now the blacksmith. These skills are your tools. Use them to create. Inspire and strive.</p><blockquote name="c67a" id="c67a" class="graf graf--pullquote graf-after--p"><em class="markup--em markup--pullquote-em">The computer programmer is a creator of universes for which he alone is responsible. Universes of virtually unlimited complexity can be created in the form of computer programs.</em></blockquote><blockquote name="31cc" id="31cc" class="graf graf--pullquote graf-after--pullquote"><em class="markup--em markup--pullquote-em">— Joseph Weizenbaum, Computer Power and Human Reason</em></blockquote><p name="617b" id="617b" class="graf graf--p graf-after--pullquote graf--last">Where to start? From the very beginning. The worst thing one can do is to rush the process of gaining knowledge. Nowhere is this more crucial than in programming. For without roots, a tree is nothing.</p></div></div></section><section name="d7f3" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="c466" id="c466" class="graf graf--p graf--leading graf--last"></p></div></div></section></section>
					`,
					img: "assets/img/apple-camera-desk-office-darken.jpg",
					urlCode: "can-you-learn-to-code-in-4-weeks"

				},
				{
					id: 2,
					title: "“Hello World!” app with Node.js and Express",
					subtitle: "Do you use Node…? You will.",
					createdAt: "Jan 9 2017, 6 min read.",
					body: `
					<section name="23b8" class="section section--body section--first"><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="ad54" id="ad54" class="graf graf--p graf-after--h4">This article is aimed for beginner developers and anyone interested in getting up and running with Node.js. Before diving into this article, you should be confident enough with JavaScript to know the basic concepts of the language. Technical terms regarding Node will be explained and linked below.</p></div><div class="section-inner sectionLayout--fullWidth"><figure name="ffdf" id="ffdf" class="graf graf--figure graf--layoutFillWidth graf-after--p"><div class="aspectRatioPlaceholder is-locked"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 53.800000000000004%;"></div><img class="graf-image" data-image-id="1*DfH5s8jWzkkgIBRALLzQMw.jpeg" data-width="1024" data-height="551" src="https://cdn-images-1.medium.com/max/2000/1*DfH5s8jWzkkgIBRALLzQMw.jpeg"></div><figcaption class="imageCaption">Hello World!</figcaption></figure></div><div class="section-inner sectionLayout--insetColumn"><h3 name="0b20" id="0b20" class="graf graf--h3 graf-after--figure">What is <a href="https://nodejs.org/en/" data-href="https://nodejs.org/en/" class="markup--anchor markup--h3-anchor" target="_blank">Node.js</a>?</h3><p name="4a84" id="4a84" class="graf graf--p graf-after--h3">Node is an asynchronous event driven JavaScript runtime built upon Chrome’s V8 JavaScript engine. It’s designed to build scalable network applications.</p><p name="7ca4" id="7ca4" class="graf graf--p graf-after--p">That being the raw definition, let me clarify. Node.js enables you to write server side JavaScript. You may now be wondering, how? As you know, JavaScript is a language which runs in a browser. The browser’s engine takes JavaScript code and compiles it into commands. The creator of Node.js took Chrome’s engine and built a runtime for it to work on a server. Don’t get confused with the word runtime. It’s an environment where the language can get interpreted. So what do we have now? A way to write JavaScript on the back end.</p><p name="f65b" id="f65b" class="graf graf--p graf-after--p">Regarding the definition, you might be wondering what the term asynchronous even means in the current context. JavaScript is <a href="https://en.wikipedia.org/wiki/Thread_%28computing%29" data-href="https://en.wikipedia.org/wiki/Thread_%28computing%29" class="markup--anchor markup--p-anchor" target="_blank">single threaded</a>, meaning there is only one thread of execution. So you don’t want events to interrupt the main thread of execution. This is what asynchronous means, handling events without interrupting the main thread. Node is based on this <em class="markup--em markup--p-em">non-blocking</em> execution, making it one of the fastest tools for building web applications today. In the following “Hello World” example, many connections can be handled concurrently. Upon each connection the <a href="http://dreamerslab.com/blog/en/javascript-callbacks/" data-href="http://dreamerslab.com/blog/en/javascript-callbacks/" class="markup--anchor markup--p-anchor" target="_blank">callback</a> is fired, but if there is no work to be done Node will remain asleep.</p><p name="512c" id="512c" class="graf graf--p graf-after--p graf--last">There are 6 simple steps in this example, bear with me.</p></div></div></section><section name="fe4b" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><ol class="postList"><li name="a01d" id="a01d" class="graf graf--li graf--leading"><strong class="markup--strong markup--li-strong">Install Node.js for your platform (MacOS, Windows or Linux)</strong></li></ol><div name="dd9a" id="dd9a" class="graf graf--mixtapeEmbed graf-after--li"><a href="https://nodejs.org/en/" data-href="https://nodejs.org/en/" class="markup--anchor markup--mixtapeEmbed-anchor" title="https://nodejs.org/en/"><strong class="markup--strong markup--mixtapeEmbed-strong">Node.js</strong><br><em class="markup--em markup--mixtapeEmbed-em">Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O…</em>nodejs.org</a><a href="https://nodejs.org/en/" class="js-mixtapeImage mixtapeImage u-ignoreBlock" data-media-id="a2e2450fdb50b7b212aa6a23edcd9095" data-thumbnail-img-id="0*s_BaJNy5Jx9BBc9w." style="background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*s_BaJNy5Jx9BBc9w.);"></a></div><p name="695a" id="695a" class="graf graf--p graf-after--mixtapeEmbed">The first step is to get yourself an instance of the JavaScript runtime up and running on your local machine. Just smash <strong class="markup--strong markup--p-strong">nodejs.org</strong> in your browsers address bar, or click the link above, and you should be good to go. The home screen should give you what you want right away. As I am running Ubuntu on my machine, the respective version of Node.js for my operating system is listed. Go ahead, download and install it. This will give you the tools needed to run a server on your local machine.</p><figure name="728a" id="728a" class="graf graf--figure graf-after--p graf--last"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 400px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 57.199999999999996%;"></div><img class="graf-image" data-image-id="1*LWV8A-Fk2YAYfPtWXrtKtQ.png" data-width="1307" data-height="747" src="https://cdn-images-1.medium.com/max/800/1*LWV8A-Fk2YAYfPtWXrtKtQ.png"></div></figure></div></div></section><section name="9a96" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="2f38" id="2f38" class="graf graf--p graf--leading"><a href="https://www.git-tower.com/blog/command-line-cheat-sheet/" data-href="https://www.git-tower.com/blog/command-line-cheat-sheet/" class="markup--anchor markup--p-anchor" target="_blank"><strong class="markup--strong markup--p-strong">2. Open a command prompt and type:</strong></a></p><pre name="18d8" id="18d8" class="graf graf--pre graf-after--p">mkdir myapp<br>cd myapp</pre><p name="98db" id="98db" class="graf graf--p graf-after--pre graf--last">These commands are universal for whatever OS you’ll be running. The former will create a new directory inside the directory you are currently in, <em class="markup--em markup--p-em">mkdir = “make directory”.</em> The latter will change into this newly created directory, <em class="markup--em markup--p-em">cd = “change directory”</em>. Hard-core windows users can calm down, this will work for you guys too, as it is equivalent to creating a new folder within your file system… only more fancy.</p></div></div></section><section name="7751" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="0fd9" id="0fd9" class="graf graf--p graf--leading"><strong class="markup--strong markup--p-strong">3. Initialize your project and link it to npm</strong></p><div name="0f57" id="0f57" class="graf graf--mixtapeEmbed graf-after--p"><a href="https://www.npmjs.com/" data-href="https://www.npmjs.com/" class="markup--anchor markup--mixtapeEmbed-anchor" title="https://www.npmjs.com/"><strong class="markup--strong markup--mixtapeEmbed-strong">npm</strong><br><em class="markup--em markup--mixtapeEmbed-em">npm is the package manager for javascript</em>www.npmjs.com</a><a href="https://www.npmjs.com/" class="js-mixtapeImage mixtapeImage u-ignoreBlock" data-media-id="ac76028e07fa565ed4006978107f5ce6" data-thumbnail-img-id="0*ZlHBSOf8xpshMmtr." style="background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*ZlHBSOf8xpshMmtr.);"></a></div><p name="d0cb" id="d0cb" class="graf graf--p graf-after--mixtapeEmbed">Now the real fun starts. After creating your directory, very innovatively named <em class="markup--em markup--p-em">myapp</em>, you will need to initialize a project and link it to npm. <br>Np-what? Okay, calm down. Npm is short for <em class="markup--em markup--p-em">node package manager</em>. This is where all node packages live. Packages can be viewed as bundles of code, like modules, which carry out a specific function. This functionality is what we as developers are utilizing. We use the application program interface, the API, provided for us by these modules. What is an API you ask?</p><div name="52be" id="52be" class="graf graf--mixtapeEmbed graf-after--p"><a href="https://medium.freecodecamp.com/what-is-an-api-in-english-please-b880a3214a82" data-href="https://medium.freecodecamp.com/what-is-an-api-in-english-please-b880a3214a82" class="markup--anchor markup--mixtapeEmbed-anchor" title="https://medium.freecodecamp.com/what-is-an-api-in-english-please-b880a3214a82"><strong class="markup--strong markup--mixtapeEmbed-strong">What is an API? In English, please.</strong><br><em class="markup--em markup--mixtapeEmbed-em">Before I learned software development, API sounded like a kind of beer.</em>medium.freecodecamp.com</a><a href="https://medium.freecodecamp.com/what-is-an-api-in-english-please-b880a3214a82" class="js-mixtapeImage mixtapeImage u-ignoreBlock" data-media-id="45e376e58783079f225fc869be588907" data-thumbnail-img-id="1*F8R-PEI9iVJ-sY3qFZemCg.png" style="background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*F8R-PEI9iVJ-sY3qFZemCg.png);"></a></div><p name="487c" id="487c" class="graf graf--p graf-after--mixtapeEmbed">The modules in turn act like black boxes with buttons and levers we can push and pull to get the desired end result.</p><p name="aae9" id="aae9" class="graf graf--p graf-after--p">Running this command initializes your project:</p><pre name="6c7d" id="6c7d" class="graf graf--pre graf-after--p">npm init</pre><p name="11d0" id="11d0" class="graf graf--p graf-after--pre">This creates a <em class="markup--em markup--p-em">package.json</em> file in your <em class="markup--em markup--p-em">myapp</em> folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things.</p><p name="e48e" id="e48e" class="graf graf--p graf-after--p">You can enter your way through all of them <strong class="markup--strong markup--p-strong">EXCEPT</strong> this one:</p><pre name="7dd2" id="7dd2" class="graf graf--pre graf-after--p">entry point: (index.js) </pre><p name="6076" id="6076" class="graf graf--p graf-after--pre">You will want to change this to:</p><pre name="b027" id="b027" class="graf graf--pre graf-after--p graf--last">app.js</pre></div></div></section><section name="e922" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="e392" id="e392" class="graf graf--p graf--leading"><strong class="markup--strong markup--p-strong">4. Install Express in the <em class="markup--em markup--p-em">myapp</em> directory</strong></p><div name="436a" id="436a" class="graf graf--mixtapeEmbed graf-after--p"><a href="http://expressjs.com/" data-href="http://expressjs.com/" class="markup--anchor markup--mixtapeEmbed-anchor" title="http://expressjs.com/"><strong class="markup--strong markup--mixtapeEmbed-strong">Express - Node.js web application framework</strong><br><em class="markup--em markup--mixtapeEmbed-em">Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and…</em>expressjs.com</a><a href="http://expressjs.com/" class="js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock" data-media-id="819a6dce35def9ada3057bb7e9ac6345"></a></div><p name="ab90" id="ab90" class="graf graf--p graf-after--mixtapeEmbed">While still in the <em class="markup--em markup--p-em">myapp</em> directory run:</p><pre name="62da" id="62da" class="graf graf--pre graf-after--p">npm install express --save</pre><p name="7d4b" id="7d4b" class="graf graf--p graf-after--pre">The <em class="markup--em markup--p-em">install</em> command will go ahead and find the package you wish to install, and install it to your project. You will now be able to see a <em class="markup--em markup--p-em">node_modules</em> folder get created in the root of your project. This is a crucial step, as you will be able to <em class="markup--em markup--p-em">require</em> any of the recently installed files in your own application files. The addition of —save will save the package to your dependencies list, located in the <em class="markup--em markup--p-em">package.json</em>, in your <em class="markup--em markup--p-em">myapp</em> directory.</p><p name="e90f" id="e90f" class="graf graf--p graf-after--p">Yeah, I know what you’re thinking. What exactly is this Express thing? Some mail delivery service, rivaling FedEx, I presume (please ignore these lame jokes). No, to burst your bubble, Express is a…</p><blockquote name="f290" id="f290" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p">“Fast, unopinionated, minimalist web framework for <a href="https://nodejs.org/en/" data-href="https://nodejs.org/en/" class="markup--anchor markup--pullquote-anchor" target="_blank">Node.js</a>” — Taken from Express.js’ official website</blockquote><p name="0bfc" id="0bfc" class="graf graf--p graf-after--pullquote graf--last">It gives you a set of robust and easy to use tools to get your web application up and running. Express has become so popular, it now is the de facto standard, in the vast majority of Node.js applications today. I strongly encourage the use of Express.</p></div></div></section><section name="0c8a" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="32d3" id="32d3" class="graf graf--p graf--leading"><strong class="markup--strong markup--p-strong">5. Start your text editor of choice and create a file named <em class="markup--em markup--p-em">app.js</em>. <br></strong>Write the following:</p><pre name="6ce1" id="6ce1" class="graf graf--pre graf-after--p">var express = require(&#39;express&#39;);<br>var app = express();</pre><pre name="3ea0" id="3ea0" class="graf graf--pre graf-after--pre">app.get(&#39;/&#39;, function (req, res) {<br>  res.send(&#39;Hello World!&#39;);<br>});</pre><pre name="422b" id="422b" class="graf graf--pre graf-after--pre">app.listen(3000, function () {<br>  console.log(&#39;Example app listening on port 3000!&#39;);<br>});</pre><p name="c98b" id="c98b" class="graf graf--p graf-after--pre">Here is where you will need to use the package which was recently installed. The first line declares a variable which will contain the module called express, grabbing it from the <em class="markup--em markup--p-em">node_modules</em> folder. The module is actually a function. Assigning the function call to another variable gives you access to a predefined set of tools which will in a great deal make your life much easier. You could view the variable <em class="markup--em markup--p-em">app </em>as an object, whose methods you are utilizing to build the actual program.</p><p name="5659" id="5659" class="graf graf--p graf-after--p">The listen method starts a server and listens on port 3000 for connections.<br>It responds with “Hello World!” for get requests to the root URL (/). For every other path, it will respond with a <em class="markup--em markup--p-em">404 Not Found</em>.</p><p name="e67b" id="e67b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">6. Run the app<br></strong>Type the command:</p><pre name="613f" id="613f" class="graf graf--pre graf-after--p">node app.js</pre><p name="29cb" id="29cb" class="graf graf--p graf-after--pre">After running the command, load <a href="http://localhost:3000/" data-href="http://localhost:3000/" class="markup--anchor markup--p-anchor" rel="nofollow" target="_blank">http://localhost:3000/</a> in a browser to see the output. You should also see “Example app listening on port 3000!” get logged to the command line.</p><figure name="02eb" id="02eb" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 397px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 56.699999999999996%;"></div><img class="graf-image" data-image-id="1*vAF8KgTWu6983trFjK3zew.png" data-width="1322" data-height="750" src="https://cdn-images-1.medium.com/max/800/1*vAF8KgTWu6983trFjK3zew.png"></div><figcaption class="imageCaption">Wow, so much output!</figcaption></figure><p name="4f16" id="4f16" class="graf graf--p graf-after--figure graf--last">That’s it, you’re done. You have successfully created your first Node app. Don’t stop here, keep exploring the wonderful world of Node.js, as it has much more to offer.</p></div></div></section><section name="80c5" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="83d9" id="83d9" class="graf graf--p graf--leading">Your finished app should have a folder structure somewhat resembling this.</p><figure name="54d8" id="54d8" class="graf graf--figure graf-after--p graf--last"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 384px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 54.800000000000004%;"></div><img class="graf-image" data-image-id="1*QJPDVqdT5sdGyZqWn7LHCw.png" data-width="772" data-height="423" src="https://cdn-images-1.medium.com/max/800/1*QJPDVqdT5sdGyZqWn7LHCw.png"></div><figcaption class="imageCaption">Folder structure — green for folders — blue for files</figcaption></figure></div></div></section><section name="0852" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="2a1e" id="2a1e" class="graf graf--p graf--leading">That’s it for me today. If you liked this article and if it helped you in any way, feel free to follow me, more tutorials like this one will be coming soon. If you believe this article will be of big help to someone, feel free to share.</p><p name="1410" id="1410" class="graf graf--p graf-after--p">Happy coding :)</p><p name="051e" id="051e" class="graf graf--p graf-after--p graf--last"></p></div></div></section>
					`,
					img: "http://i.imgur.com/eNHFe8V.jpg",
					urlCode: "hello-world-app-with-nodejs-and-express"
				},
				{
					id: 3,
					title: "Git gud",
					subtitle: "Step up your software development game with version control software",
					createdAt: "Feb 5 2017, 8 min read.",
					body: `
					<section name="c66a" class="section section--body section--first"><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="55ee" id="55ee" class="graf graf--p graf-after--h4">Have you ever wondered how one learns to use Git well? You use Git very poorly for a long time. Eventually, you’ll get the hang of it. Here’s my short tutorial about what Git actually is and the 7 most used Git commands. Mainly, aimed towards aspiring developers and college freshmen who are in need of an introductory explanation of what Git is and how to use it with confidence.</p></div><div class="section-inner sectionLayout--fullWidth"><figure name="e36a" id="e36a" class="graf graf--figure graf--layoutFillWidth graf-after--p"><div class="aspectRatioPlaceholder is-locked"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 40%;"></div><img class="graf-image" data-image-id="1*7hLJs-qOh-1pUMH4Z78A6A.jpeg" data-width="3000" data-height="1200" src="https://cdn-images-1.medium.com/max/2000/1*7hLJs-qOh-1pUMH4Z78A6A.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #1</figcaption></figure></div><div class="section-inner sectionLayout--insetColumn"><p name="3d4a" id="3d4a" class="graf graf--p graf-after--figure">The universal first step for any developer is to choose a common place to host his or her code base. Voilá, <a href="https://github.com/" data-href="https://github.com/" class="markup--anchor markup--p-anchor" target="_blank">Github</a>! The meeting place for all things regarding code. To be able to understand the concept of Github you would first need to understand what Git really is.</p><p name="741b" id="741b" class="graf graf--p graf-after--p">Git is a version control software, based on the command line, with a few desktop apps available for Windows and Mac. Created by Linus Torvalds, the father of Linux and one of the most influential people in computer science, ever. Channeling this merit, Git has become a standard for a vast majority of software developers regarding sharing and maintaining code. Those were a bunch of large words. Let’s break it down. Version control software, means exactly what it says. Git allows you to have a preview of all the versions of your code you have ever written. Literally, ever! Every code base a developer has, will be stored in its respective repository, which can be named anything from <em class="markup--em markup--p-em">pineapple</em> to <em class="markup--em markup--p-em">express</em>. In the process of developing the code within this repository you will make countless changes, up until the first official release. Here lies the core reason why version control software is so important. It enables you, the developer, to have a clear view of all changes, revisions and improvements ever done to the code base. In turn making it much easier to collaborate, download code to make edits, and upload changes to the repository. However, in spite of all this awesomeness, one thing takes the crown as the most incredible. You can download and use the files even thought you have nothing to do with the development process!</p><p name="e557" id="e557" class="graf graf--p graf-after--p">Let’s get back to the Github part of the story. It’s just a hub for all repositories, where they can be stored and viewed online. A central meeting point for like minded individuals.</p><h3 name="604c" id="604c" class="graf graf--h3 graf-after--p">Let’s start using it already!</h3><p name="6c1c" id="6c1c" class="graf graf--p graf-after--h3">Okay, remember, Git is a software, and like any other software you’ll first need to install it:</p><div name="a79b" id="a79b" class="graf graf--mixtapeEmbed graf-after--p"><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" data-href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" class="markup--anchor markup--mixtapeEmbed-anchor" title="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"><strong class="markup--strong markup--mixtapeEmbed-strong">Git - Installing Git</strong><br><em class="markup--em markup--mixtapeEmbed-em">If you do want to install Git from source, you need to have the following libraries that Git depends on: autotools…</em>git-scm.com</a><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" class="js-mixtapeImage mixtapeImage u-ignoreBlock" data-media-id="fb28620fe3100d2d6fe1d3e4a962103f" data-thumbnail-img-id="0*ytARHURsHktDneYa." style="background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*ytARHURsHktDneYa.);"></a></div><p name="e6fa" id="e6fa" class="graf graf--p graf-after--mixtapeEmbed">*<strong class="markup--strong markup--p-strong">Anchorman voice</strong>*<br><em class="markup--em markup--p-em">Please click on the link above, and follow the instructions stated…</em></p><p name="9258" id="9258" class="graf graf--p graf-after--p">Done installing it, great. Now you will need to punch in <a href="https://github.com/" data-href="https://github.com/" class="markup--anchor markup--p-anchor" target="_blank">github.com</a> in your browsers address bar. Create an account if you don’t already have one, and you’re set to rock’n’roll! Jump in and create a new repository, name it Steve for no reason at all, just for the fun of having a repository named Steve. Go ahead and check the <em class="markup--em markup--p-em">Initialize this repository with a README </em>checkbox and click the create button. You now have a new repository called Steve. Be proud of yourself, I sure am.</p><figure name="cb2b" id="cb2b" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 100%; max-height: 1061px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 137.3%;"></div><img class="graf-image" data-image-id="1*txfAZdt3U0u9V9WTEZiyNQ.jpeg" data-width="746" data-height="1024" src="https://cdn-images-1.medium.com/max/800/1*txfAZdt3U0u9V9WTEZiyNQ.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #2</figcaption></figure><h3 name="c756" id="c756" class="graf graf--h3 graf-after--figure">Starting to use Git for real this time.</h3><p name="03c3" id="03c3" class="graf graf--p graf-after--h3">Now comes the fun part. You’re ready to clone Steve to your local machine. View this process as simply copying the repository from Github to your computer. By clicking the <em class="markup--em markup--p-em">clone or download</em> button you will see a URL which will look something like this:</p><pre name="9cd7" id="9cd7" class="graf graf--pre graf-after--p">https://github.com/yourGithubAccountName/Steve.git</pre><p name="5333" id="5333" class="graf graf--p graf-after--pre">Copy this URL and open up a command prompt. Now write and run this command:</p><pre name="995f" id="995f" class="graf graf--pre graf-after--p">git clone https://github.com/yourGithubAccountName/Steve.git</pre><p name="5264" id="5264" class="graf graf--p graf-after--pre">Abrakadabra! Steve has automagically been cloned to your computer. Looking in the directory where you cloned the repository, you’ll see a folder named Steve. This local folder is now linked with it’s <em class="markup--em markup--p-em">origin, </em>the original repository on Github.</p><p name="d9a1" id="d9a1" class="graf graf--p graf-after--p">Remember this process, you will surely repeat it many times in your career as a software developer. With all this formal stuff done, you are ready to get started with the most common and regularly used Git commands.</p><h3 name="80d4" id="80d4" class="graf graf--h3 graf-after--p">You’re actually just now starting to use git for real.</h3><p name="ca9c" id="ca9c" class="graf graf--p graf-after--h3">Open up the Steve directory and go ahead and open a command prompt from within the same directory. Run the command:</p><pre name="9e10" id="9e10" class="graf graf--pre graf-after--p">git status</pre><p name="6b26" id="6b26" class="graf graf--p graf-after--pre">This will output the status of your working directory, showing you all the files you have edited. This means it’s showing you the difference between the files on the origin and your local working directory. The status command is designed to be used as a <em class="markup--em markup--p-em">commit</em> template. I’ll come back to talking about commit a bit further down this tutorial. Simply put, <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-status" data-href="https://git-scm.com/docs/git-status" class="markup--anchor markup--p-anchor" target="_blank">git status</a></code> shows you which files you have edited, in turn giving you an overview of which of them you wish to upload back to the origin.</p><p name="8acb" id="8acb" class="graf graf--p graf-after--p">But, before you do any of that, first you need to pick which files you wish to send back to the origin. This is done with:</p><pre name="4b84" id="4b84" class="graf graf--pre graf-after--p"><a href="https://git-scm.com/docs/git-add" data-href="https://git-scm.com/docs/git-add" class="markup--anchor markup--pre-anchor" target="_blank">git add</a></pre><p name="4c80" id="4c80" class="graf graf--p graf-after--pre">Please go ahead and create a new text file in the Steve directory. Name it <em class="markup--em markup--p-em">pineapple.txt</em> just for the fun of it. Write whatever you would want in this file. Switch back to the command prompt, and run <code class="markup--code markup--p-code">git status</code> once again. Now, you’ll see the file show up in red under the banner <em class="markup--em markup--p-em">untracked files.</em></p><pre name="01c4" id="01c4" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be commited)</pre><pre name="d7b1" id="d7b1" class="graf graf--pre graf-after--pre">       pineapple.txt<br><br></pre><p name="5130" id="5130" class="graf graf--p graf-after--pre">The next step is to add a file to staging. Staging can be viewed as a context where all changes you have picked will be bundled into one, when the time comes to commit them. Now you can go ahead and add this file to staging:</p><pre name="963f" id="963f" class="graf graf--pre graf-after--p">git add -A</pre><p name="8095" id="8095" class="graf graf--p graf-after--pre">The <em class="markup--em markup--p-em">-A </em>flag means that all files that have been changed will be staged for commit. However, <code class="markup--code markup--p-code">git add</code> is very flexible and it is perfectly fine to add files one by one. Just like this:</p><pre name="1a79" id="1a79" class="graf graf--pre graf-after--p">git add pineapple.txt</pre><p name="514a" id="514a" class="graf graf--p graf-after--pre">This approach gives you power to cherry pick every file you wish to stage, without the added worry that you’ll change something you weren’t supposed to.</p><p name="71c9" id="71c9" class="graf graf--p graf-after--p">After running <code class="markup--code markup--p-code">git status</code> once again you should see something like this:</p><pre name="0906" id="0906" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</pre><pre name="61f1" id="61f1" class="graf graf--pre graf-after--pre">new file:   pineapple.txt<br><br></pre><p name="a387" id="a387" class="graf graf--p graf-after--pre">Ready to commit the changes? I sure am.</p><pre name="4b32" id="4b32" class="graf graf--pre graf-after--p">git commit -m &quot;Write your message here&quot;</pre><p name="9131" id="9131" class="graf graf--p graf-after--pre">The <a href="https://git-scm.com/docs/git-commit" data-href="https://git-scm.com/docs/git-commit" class="markup--anchor markup--p-anchor" target="_blank">Git commit</a> command stores the current files in staging in a new commit along with a log message from the user describing the changes. The <em class="markup--em markup--p-em">-m </em>flag includes the message written in double quotes in the commit.</p><p name="f0e1" id="f0e1" class="graf graf--p graf-after--p">Checking the status once again will show you:</p><pre name="1477" id="1477" class="graf graf--pre graf-after--p">On branch master<br>Your branch is ahead of &#39;origin/master&#39; by 1 commit.<br>  (use &quot;git push&quot; to publish your local commits)<br>nothing to commit, working directory clean</pre><p name="eb60" id="eb60" class="graf graf--p graf-after--pre">All changes have now been bundled into one commit with one dedicated message regarding the work you have done. You’re now ready to <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-push" data-href="https://git-scm.com/docs/git-push" class="markup--anchor markup--p-anchor" target="_blank">git push</a></code> this commit to the <em class="markup--em markup--p-em">origin</em>. The push command does literally what it means. It will upload your committed changes from your local machine to the repository origin on Github. Go back to the command prompt and run:</p><pre name="85b4" id="85b4" class="graf graf--pre graf-after--p">git push</pre><p name="0d69" id="0d69" class="graf graf--p graf-after--pre">It will ask you to enter your Github username and password, after which you will see something like this:</p><pre name="ad8e" id="ad8e" class="graf graf--pre graf-after--p">Counting objects: 3, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (2/2), done.<br>Writing objects: 100% (3/3), 280 bytes | 0 bytes/s, done.<br>Total 3 (delta 0), reused 0 (delta 0)<br>To https://github.com/yourGithubUserName/Steve.git<br>   c77a97c..08bb95a  master -&gt; master</pre><p name="6b0f" id="6b0f" class="graf graf--p graf-after--pre">That’s it. You have uploaded the local changes. Go ahead and look at your repository on Github and you’ll see that it now contains a file named <em class="markup--em markup--p-em">pineapple.txt</em>.</p><p name="c659" id="c659" class="graf graf--p graf-after--p">What if you work in a team of developers? Where all of them push commits to the origin. What happens then? This is where Git starts to show it’s real power. You can just as easily <a href="https://git-scm.com/docs/git-pull" data-href="https://git-scm.com/docs/git-pull" class="markup--anchor markup--p-anchor" target="_blank">pull</a> the latest version of the code base to your local machine with one simple command.</p><pre name="0a6d" id="0a6d" class="graf graf--pre graf-after--p">git pull</pre><p name="74b0" id="74b0" class="graf graf--p graf-after--pre">But Git has it’s limitations. You need to have matching versions to be able to <strong class="markup--strong markup--p-strong">push</strong> changes to the origin. Meaning the version you have locally needs to be exactly the same as the one on the origin. When <strong class="markup--strong markup--p-strong">pulling</strong> from the origin you shouldn’t have files in the working directory, as they will be overwritten in the process. Hence me giving this simple advice. When in the process of learning Git, make a habit of following these steps:</p><ol class="postList"><li name="ee45" id="ee45" class="graf graf--li graf-after--p"><code class="markup--code markup--li-code">git status</code> all the time!</li><li name="b2b9" id="b2b9" class="graf graf--li graf-after--li">Try only to change files you really want to change.</li><li name="0423" id="0423" class="graf graf--li graf-after--li"><code class="markup--code markup--li-code">git add -A</code> is your friend.</li><li name="2083" id="2083" class="graf graf--li graf-after--li">Feel free to <code class="markup--code markup--li-code">git commit -m &quot;meaningful messages&quot;</code> .</li><li name="238d" id="238d" class="graf graf--li graf-after--li">Always <code class="markup--code markup--li-code">git pull</code> <strong class="markup--strong markup--li-strong">before</strong> doing any pushing, <br>but <strong class="markup--strong markup--li-strong">after</strong> you have committed any changes.</li><li name="853d" id="853d" class="graf graf--li graf-after--li graf--last">Finally, <code class="markup--code markup--li-code">git push</code> the committed changes.</li></ol></div></div></section><section name="c243" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="a96b" id="a96b" class="graf graf--p graf--leading">Phew, are you still with me? You’ve come a long way. Have a break.</p><figure name="4679" id="4679" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 700px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 100%;"></div><img class="graf-image" data-image-id="1*vrNe9wt2zHczmXx-tkGipw.jpeg" data-width="1043" data-height="1043" src="https://cdn-images-1.medium.com/max/800/1*vrNe9wt2zHczmXx-tkGipw.jpeg"></div><figcaption class="imageCaption">Lame video-game reference #3</figcaption></figure><p name="52f3" id="52f3" class="graf graf--p graf-after--figure">Rested up? Great! You’re ready for some error handling. What if you accidentally changed some files your shouldn’t have touched. No need to freak out, just use <code class="markup--code markup--p-code"><a href="https://git-scm.com/docs/git-checkout" data-href="https://git-scm.com/docs/git-checkout" class="markup--anchor markup--p-anchor" target="_blank">git checkout</a></code>. Let’s change something in the <em class="markup--em markup--p-em">pineapple.txt</em> file. Add another line of text in there, let’s say, <em class="markup--em markup--p-em">“Steve is mega-awesome!”</em>. Go ahead, save the changes and check the <code class="markup--code markup--p-code">git status</code>.</p><pre name="75b2" id="75b2" class="graf graf--pre graf-after--p">On branch master<br>Your branch is up-to-date with &#39;origin/master&#39;.<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</pre><pre name="5d1e" id="5d1e" class="graf graf--pre graf-after--pre">modified:   pineapple.txt</pre><pre name="108d" id="108d" class="graf graf--pre graf-after--pre">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</pre><p name="871d" id="871d" class="graf graf--p graf-after--pre">As expected it has been registered as a change. The simplest way to revert the changes is to run:</p><pre name="445a" id="445a" class="graf graf--pre graf-after--p">git checkout -- pineapple.txt</pre><p name="df5e" id="df5e" class="graf graf--p graf-after--pre">Now you will see the file has been returned to it’s previous state.</p><p name="19bf" id="19bf" class="graf graf--p graf-after--p">But what if you really mess up. I mean like majorly mess things up, and need to reset everything back to the state the <em class="markup--em markup--p-em">origin</em> is in. No need to worry, during emergencies like this we have this beauty:</p><pre name="1ace" id="1ace" class="graf graf--pre graf-after--p">git reset --hard</pre><p name="16ac" id="16ac" class="graf graf--p graf-after--pre graf--last">The <a href="https://git-scm.com/docs/git-reset" data-href="https://git-scm.com/docs/git-reset" class="markup--anchor markup--p-anchor" target="_blank">Git reset</a> command with the -<em class="markup--em markup--p-em">-hard</em> flag discards all changes since the last commit. Pretty handy sometimes.</p></div></div></section><section name="aa1c" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="783a" id="783a" class="graf graf--p graf--leading">To wrap up this tutorial I’d like to encourage you to play around with Git as much as possible. It’s by far the best way to learn how to use it with confidence. Apart from that, make a habit of reading the Git documentation. As confusing it may seem at first, after a few moments of reading you will get the hang of it.</p><p name="480f" id="480f" class="graf graf--p graf-after--p">More tutorials like this one will be coming soon. Hope you had as much fun reading this article as I had writing it.</p><p name="5c1c" id="5c1c" class="graf graf--p graf-after--p">Git gud or git rekt! :)</p><p name="e082" id="e082" class="graf graf--p graf-after--p graf--last"></p></div></div></section>
					`,
					img: "https://assets-cdn.github.com/images/modules/open_graph/github-octocat.png",
					urlCode: "git-gud"
				}
			];
			return stories;
		}
	}
	
})();
